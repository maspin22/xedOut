{"version":3,"file":"contentScript.js","mappings":"mBAEA,IAAIA,GAAuB,EACvBC,GAA0B,EAC1BC,EAAW,KA+Ef,SAASC,IAEOC,SAASC,iBAAiB,WAGlCC,SAAQC,KAzChBC,eAA2BC,GAEzB,GAAsC,SAAlCA,EAAYC,QAAQC,UAAxB,CAQA,GAHAF,EAAYC,QAAQC,UAAY,OAG5BX,GAAwBS,EAAYG,cAAc,SAGpD,OAFAC,QAAQC,IAAI,0CACZL,EAAYM,MAAMC,QAAU,QAK9B,GAAIf,EAAyB,CAE3B,MAAMgB,EAAcR,EAAYQ,YAGhC,GAAIA,EAAYC,OAAS,GACvB,OAGFL,QAAQC,IAAI,yDAnEhBN,eAAuCW,GACrC,IACE,MAAMC,QAAe,IAAIC,SAASC,IAChCC,OAAOC,QAAQC,MAAMC,IAAI,CAAC,cAAc,SAASC,GAC/CL,EAAQK,EAAOC,UACjB,GAAE,IAGJ,IAAKR,EAEH,OADAP,QAAQC,IAAI,gCACL,EAGT,MAAMe,EAAS,uGACZV,KAEGW,QAAiBC,MAAM,6CAA8C,CACzEC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAiB,UAAUb,KAE7Bc,KAAMC,KAAKC,UAAU,CACnBC,MAAO,cACPC,SAAU,CAAC,CACTC,KAAM,OACNC,QAASX,IAEXY,YAAa,OAMjB,MAAkB,gBAFCX,EAASY,QACRC,QAAQ,GAAGC,QAAQJ,QAAQK,cAAcC,MAE/D,CAAE,MAAOC,GAEP,OADAlC,QAAQkC,MAAM,sCAAuCA,IAC9C,CACT,CACF,CA6B8BC,CAAwB/B,KAGhDJ,QAAQC,IAAI,oCACZL,EAAYM,MAAMC,QAAU,OAEhC,CA7BA,CA8BF,CAQIiC,CAAY1C,EAAK,GAErB,CAEA,SAAS2C,IACFhD,IACHA,EAAW,IAAIiD,kBAAkBC,IAC/B,IAAK,MAAMC,KAAYD,EACjBC,EAASC,WAAWpC,QAEtBf,GAEJ,IAGFD,EAASqD,QAAQnD,SAAS8B,KAAM,CAAEsB,WAAW,EAAMC,SAAS,IAC5D5C,QAAQC,IAAI,+BAEhB,CAEA,SAAS4C,IACHxD,IACFA,EAASyD,aACTzD,EAAW,KACXW,QAAQC,IAAI,+BAEhB,CAGAS,OAAOqC,QAAQC,UAAUC,aAAY,CAACC,EAASC,EAAQC,KAC9B,aAAnBF,EAAQG,OACVD,EAAa,CACXE,YAAanE,EACboE,gBAAiBnE,IAES,uBAAnB8D,EAAQG,QACjBlE,GAAwBA,EAEpBA,GACFG,IAIEH,GAAwBC,EAC1BiD,IAEAQ,IAGFO,EAAa,CAAEI,SAAS,EAAMC,OAAQtE,KACV,0BAAnB+D,EAAQG,SACjBjE,GAA2BA,EAEvBA,GACFE,IAIEH,GAAwBC,EAC1BiD,IAEAQ,IAGFO,EAAa,CAAEI,SAAS,EAAMC,OAAQrE,MAGjC,KAITY,QAAQC,IAAI,2C","sources":["webpack://create/./src/contentScript.js"],"sourcesContent":["'use strict';\n\nlet isVideoRemovalActive = false;\nlet isPoliticalFilterActive = false;\nlet observer = null;\n\nasync function analyzePoliticalContent(text) {\n  try {\n    const apiKey = await new Promise((resolve) => {\n      chrome.storage.local.get(['openaiKey'], function(result) {\n        resolve(result.openaiKey);\n      });\n    });\n\n    if (!apiKey) {\n      console.log('[X Filter] No API key found');\n      return false;\n    }\n\n    const prompt = `Analyze if the following content is political in nature. Respond with only \"true\" or \"false\":\n    \"${text}\"`;\n\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-4o-mini\",\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        temperature: 0.7\n      })\n    });\n\n    const data = await response.json();\n    const result = data.choices[0].message.content.toLowerCase().trim();\n    return result === 'true';\n  } catch (error) {\n    console.error('[X Filter] Error analyzing content:', error);\n    return false;\n  }\n}\n\nasync function processPost(postElement) {\n  // Skip posts we've already processed\n  if (postElement.dataset.processed === 'true') {\n    return;\n  }\n  \n  // Mark as processed to avoid duplicate processing\n  postElement.dataset.processed = 'true';\n  \n  // Check for videos if video removal is active\n  if (isVideoRemovalActive && postElement.querySelector('video')) {\n    console.log('[X Filter] Hiding post with video');\n    postElement.style.display = 'none';\n    return;\n  }\n  \n  // Check for political content if political filter is active\n  if (isPoliticalFilterActive) {\n    // Get the text content of the post\n    const textContent = postElement.textContent;\n    \n    // Skip very short posts or posts we've already checked\n    if (textContent.length < 10) {\n      return;\n    }\n    \n    console.log('[X Filter] Analyzing post for political content');\n    const isPolitical = await analyzePoliticalContent(textContent);\n    \n    if (isPolitical) {\n      console.log('[X Filter] Hiding political post');\n      postElement.style.display = 'none';\n    }\n  }\n}\n\nfunction processPosts() {\n  // Find all posts (articles) on the page\n  const posts = document.querySelectorAll('article');\n  \n  // Process each post\n  posts.forEach(post => {\n    processPost(post);\n  });\n}\n\nfunction startObserver() {\n  if (!observer) {\n    observer = new MutationObserver((mutations) => {\n      for (const mutation of mutations) {\n        if (mutation.addedNodes.length) {\n          // New content was added, check for posts\n          processPosts();\n        }\n      }\n    });\n\n    observer.observe(document.body, { childList: true, subtree: true });\n    console.log('[X Filter] Observer started');\n  }\n}\n\nfunction stopObserver() {\n  if (observer) {\n    observer.disconnect();\n    observer = null;\n    console.log('[X Filter] Observer stopped');\n  }\n}\n\n// Listen for messages from the popup\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.action === 'getState') {\n    sendResponse({ \n      videoActive: isVideoRemovalActive,\n      politicalActive: isPoliticalFilterActive\n    });\n  } else if (request.action === 'toggleVideoRemoval') {\n    isVideoRemovalActive = !isVideoRemovalActive;\n    \n    if (isVideoRemovalActive) {\n      processPosts();\n    }\n    \n    // Start or stop the observer based on whether any filter is active\n    if (isVideoRemovalActive || isPoliticalFilterActive) {\n      startObserver();\n    } else {\n      stopObserver();\n    }\n    \n    sendResponse({ success: true, active: isVideoRemovalActive });\n  } else if (request.action === 'togglePoliticalFilter') {\n    isPoliticalFilterActive = !isPoliticalFilterActive;\n    \n    if (isPoliticalFilterActive) {\n      processPosts();\n    }\n    \n    // Start or stop the observer based on whether any filter is active\n    if (isVideoRemovalActive || isPoliticalFilterActive) {\n      startObserver();\n    } else {\n      stopObserver();\n    }\n    \n    sendResponse({ success: true, active: isPoliticalFilterActive });\n  }\n  \n  return true; // Indicates async response\n});\n\n// Initial processing when the script loads\nconsole.log('[X Content Filter] Content script loaded'); "],"names":["isVideoRemovalActive","isPoliticalFilterActive","observer","processPosts","document","querySelectorAll","forEach","post","async","postElement","dataset","processed","querySelector","console","log","style","display","textContent","length","text","apiKey","Promise","resolve","chrome","storage","local","get","result","openaiKey","prompt","response","fetch","method","headers","body","JSON","stringify","model","messages","role","content","temperature","json","choices","message","toLowerCase","trim","error","analyzePoliticalContent","processPost","startObserver","MutationObserver","mutations","mutation","addedNodes","observe","childList","subtree","stopObserver","disconnect","runtime","onMessage","addListener","request","sender","sendResponse","action","videoActive","politicalActive","success","active"],"sourceRoot":""}