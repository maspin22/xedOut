{"version":3,"file":"popup.js","mappings":"mBA0BA,SAASA,EAAkBC,EAAUC,GACnC,MAAMC,EAASC,SAASC,eAAeJ,GACtB,cAAbA,EACFE,EAAOG,YAAcJ,EAAW,uBAAyB,uBACnC,uBAAbD,IACTE,EAAOG,YAAcJ,EAAW,0BAA4B,2BAE9DC,EAAOI,UAAUC,OAAO,SAAUN,EACpC,CAGAE,SAASC,eAAe,cAAcI,iBAAiB,SAAS,KAC9D,MAAMC,EAASN,SAASC,eAAe,eAAeM,MAClDD,GAAqB,aAAXA,GACZE,OAAOC,QAAQC,MAAMC,IAAI,CAAEC,UAAWN,IAAU,WAC9CN,SAASC,eAAe,eAAeM,MAAQ,UACjD,GACF,IAIFP,SAASC,eAAe,aAAaI,iBAAiB,SAASQ,UAC7D,IACE,MAAOC,SAAaN,OAAOO,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IACrE,IAAKJ,EAAK,MAAM,IAAIK,MAAM,uBAE1BX,OAAOO,KAAKK,YAAYN,EAAIO,GAAI,CAAEC,OAAQ,uBAAwBC,IAC5Df,OAAOgB,QAAQC,UACjBC,QAAQC,MAAM,SAAUnB,OAAOgB,QAAQC,WAEvC7B,EAAkB,YAAa2B,EAASN,OAC1C,GAEJ,CAAE,MAAOU,GACPD,QAAQC,MAAM,SAAUA,EAC1B,KAIF3B,SAASC,eAAe,sBAAsBI,iBAAiB,SAASQ,UACtE,IACE,MAAOC,SAAaN,OAAOO,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IACrE,IAAKJ,EAAK,MAAM,IAAIK,MAAM,uBAE1BX,OAAOO,KAAKK,YAAYN,EAAIO,GAAI,CAAEC,OAAQ,0BAA2BC,IAC/Df,OAAOgB,QAAQC,UACjBC,QAAQC,MAAM,SAAUnB,OAAOgB,QAAQC,WAEvC7B,EAAkB,qBAAsB2B,EAASN,OACnD,GAEJ,CAAE,MAAOU,GACPD,QAAQC,MAAM,SAAUA,EAC1B,KAIF3B,SAASK,iBAAiB,oBAhF1BQ,iBACE,MAAOC,SAAaN,OAAOO,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IACrE,GAAKJ,EAEL,IACEN,OAAOO,KAAKK,YAAYN,EAAIO,GAAI,CAAEC,OAAQ,aAAcC,KACjDf,OAAOgB,QAAQC,WAAaF,IAC/B3B,EAAkB,YAAa2B,EAASK,aACxChC,EAAkB,qBAAsB2B,EAASM,iBACnD,IAIFrB,OAAOC,QAAQC,MAAMoB,IAAI,CAAC,cAAc,SAASC,GAC3CA,EAAOnB,YACTZ,SAASC,eAAe,eAAeM,MAAQ,WAEnD,GACF,CAAE,MAAOoB,GACPD,QAAQC,MAAM,8BAA+BA,EAC/C,CACF,G","sources":["webpack://create/./src/popup.js"],"sourcesContent":["'use strict';\n\n// Initialize button states\nasync function initializeButtons() {\n  const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n  if (!tab) return;\n\n  try {\n    chrome.tabs.sendMessage(tab.id, { action: 'getState' }, response => {\n      if (!chrome.runtime.lastError && response) {\n        updateButtonState('toggleBtn', response.videoActive);\n        updateButtonState('togglePoliticalBtn', response.politicalActive);\n      }\n    });\n\n    // Load API key if exists\n    chrome.storage.local.get(['openaiKey'], function(result) {\n      if (result.openaiKey) {\n        document.getElementById('apiKeyInput').value = '********';\n      }\n    });\n  } catch (error) {\n    console.error('Error initializing buttons:', error);\n  }\n}\n\nfunction updateButtonState(buttonId, isActive) {\n  const button = document.getElementById(buttonId);\n  if (buttonId === 'toggleBtn') {\n    button.textContent = isActive ? 'Video Removal Active' : 'Enable Video Removal';\n  } else if (buttonId === 'togglePoliticalBtn') {\n    button.textContent = isActive ? 'Political Filter Active' : 'Enable Political Filter';\n  }\n  button.classList.toggle('active', isActive);\n}\n\n// Save API Key\ndocument.getElementById('saveApiKey').addEventListener('click', () => {\n  const apiKey = document.getElementById('apiKeyInput').value;\n  if (apiKey && apiKey !== '********') {\n    chrome.storage.local.set({ openaiKey: apiKey }, function() {\n      document.getElementById('apiKeyInput').value = '********';\n    });\n  }\n});\n\n// Video filter toggle\ndocument.getElementById('toggleBtn').addEventListener('click', async () => {\n  try {\n    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    if (!tab) throw new Error('No active tab found');\n    \n    chrome.tabs.sendMessage(tab.id, { action: 'toggleVideoRemoval' }, response => {\n      if (chrome.runtime.lastError) {\n        console.error('Error:', chrome.runtime.lastError);\n      } else {\n        updateButtonState('toggleBtn', response.active);\n      }\n    });\n  } catch (error) {\n    console.error('Error:', error);\n  }\n});\n\n// Political filter toggle\ndocument.getElementById('togglePoliticalBtn').addEventListener('click', async () => {\n  try {\n    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    if (!tab) throw new Error('No active tab found');\n    \n    chrome.tabs.sendMessage(tab.id, { action: 'togglePoliticalFilter' }, response => {\n      if (chrome.runtime.lastError) {\n        console.error('Error:', chrome.runtime.lastError);\n      } else {\n        updateButtonState('togglePoliticalBtn', response.active);\n      }\n    });\n  } catch (error) {\n    console.error('Error:', error);\n  }\n});\n\n// Initialize when popup opens\ndocument.addEventListener('DOMContentLoaded', initializeButtons); "],"names":["updateButtonState","buttonId","isActive","button","document","getElementById","textContent","classList","toggle","addEventListener","apiKey","value","chrome","storage","local","set","openaiKey","async","tab","tabs","query","active","currentWindow","Error","sendMessage","id","action","response","runtime","lastError","console","error","videoActive","politicalActive","get","result"],"sourceRoot":""}